---
title: "Penguins and nakedpipes"
description: |
  Exploring the new {palmerpenguins} dataset with {nakedpipe} - An alternative to using {magrittr}'s %>%.
date: 06/21/2020
bibliography: r-refs.bib  
categories:
  - R
image: preview.png
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(nakedpipe)
library(magrittr)
```

Recently I came across [`nakedpipe`](https://github.com/moodymudskipper/nakedpipe) @R-nakedpipe on github - an R package with an intriguing name to say the least... After checking out the repo, I was very impressed and thought I'd share my notes here!

So what does `nakedpipe` _do_?

I'm sure most R users are familiar with `magrittr`'s pipe (%>%) operator. The %>% allows you to chain together multiple commands by piping forward an expression into a function like `x %>% f`, rather than `f(x)` @R-magrittr. The resulting code is usually very readable and easy to debug. `nakedpipe` adopts a similar style, but removes the need to use %>% after every function, and adds some additional logging/debugging features as well as being slightly faster than the `magrittr` implementation.

In order to try out the features in `nakedpipe` I used the new `palmerpenguins` dataset [@R-palmerpenguins] which provides a great test dataset and is a refreshing alternative the usual suspects, `mtcars` et al...

### Getting started

```{r message=FALSE}
#remotes::install_github("allisonhorst/palmerpenguins")
#remotes::install_github("moodymudskipper/nakedpipe")

library(tidyverse)
library(palmerpenguins) 
library(nakedpipe)
library(magrittr)

penguins <- penguins

```

A basic example looks like this:

```{r}
penguins %.% {
  filter(sex == "female") 
  select(1:5) 
  head(5)
}   
```

You use the `%.%` operator to "pipe" into a sequence of functions, which are within {}. You can reduce the code further by removing the subset / filter argument like:

::: {.column-margin}
Any call to < > <= >= == != %in% & | will work in this way
:::

```{r}
penguins %.% {
  sex == "female"
  select(1:5) 
  head(5)
}  
```

Similarly, this works with transform / mutate calls. The use of the `=` sign implies a new column is being created, for example:

```{r}
penguins %.% {
  sex == "female"
  body_mass_kg = body_mass_g/1000
  select(body_mass_g, body_mass_kg)
  head(5)
}  
```

Assigning the result of a sequence of function can be done by using `->` at the end of the sequence (outside of the {}) or using the `%<.%` operator at the start of the sequence.

```{r}
penguins %.% {
  sex == "female"
  arrange(body_mass_g)
  select(1,2,6) 
  head(5)
} -> small_penguins

# Or

small_penguins <- penguins

small_penguins %<.% {
  sex == "female"
  arrange(body_mass_g)
  select(1,2,6) 
  head(5)
} 

```

Additionally, you can create outputs midway through the sequence of functions by using `~~`:

```{r}
penguins %.% {
  sex == "female"
  ~~ . -> female_penguins
  select(1:5) 
  head(5) 
} -> x

head(female_penguins)
```


### Additional operators

You can use `%P.%` to print the output of each step:

```{r, message=TRUE}
penguins %P.% {
  sex == "female"
  select(1:5) 
  head(5)
} -> y
```

`%L.%` prints out timings of each step in the sequence (Not particularly useful for this toy example, but would be for longer running code)

```{r message=TRUE}
penguins %L.% {
  sex == "female"
  select(1:5) 
  head(5)
} -> z
```

`%F.%` lets you assign a function using the `nakedpipe` syntax:

```{r}
penguin_func <- . %F.% {
  group_by(species)
  summarise(across(where(is.numeric), ~mean(., na.rm = TRUE)))
  mutate(across(where(is.numeric), round, 2))
}

penguin_func(penguins)
```


### ggplot

`nakedpipe` also plays well with ggplot:

```{r warning=FALSE}
penguins %.% {
  body_mass_kg = body_mass_g / 1000
  ggplot(aes(body_mass_kg, flipper_length_mm, shape = species, colour = species))
  + geom_point() 
  + labs(y = "Flipper length", x = "Body mass (kg)")
  + theme_minimal()
}
```


There are some other useful things that `nakepipe` can do that I haven't included here, such as `%D.%` operator for debugging, `%..%` for even faster performance and even a RStudio addin to convert your `magrittr` style code to the `nakepipe` syntax. Pretty cool!

If you've found any of these examples interesting, I'd highly recommend you check out the package (https://github.com/moodymudskipper/nakedpipe) and give it a try!

# References {.unnumbered}

::: {#refs}
:::